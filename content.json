[{"title":"命名规则","date":"2014-06-30T16:24:58.000Z","path":"posts/2014/naming-rule/","text":"前言规范的命名在程序开发中有明显的优势，它即能让自己日后维护简单，也能让团队友好的合作，在网页开发中，特别是团队合作，命名是非常重要的。 页面命名页面结构# 外围wrapper# 主体main# 内容content | container# 页头header# 页脚 | 页尾footer# 中middle | center# 上top# 下bottom# 左left# 右right 页面分区# 菜单menu# 子菜单submenu# 标题title# 标志logo# 图标icon# 导航nav# 主导航mainbav# 子导航subnav# 顶导航topnav# 边导航 | 侧栏sidebar# 栏目 | 纵栏column# 左导航leftsidebar# 右导航rightsidebar# 标签页tab# 登录条loginbar# 购物车shop# 广告banner# 热点hot# 新闻news# 摘要summary# 文章列表list# 状态status# 提示信息msg# 小技巧tips# 指南guide# 服务service# 加入joinus# 版权copyright# 友情链接friendlink | link# 合作伙伴partner 功能# 登录login | log# 注册regsiter | reg# 下载download# 搜索search# 滚动scroll# 投票vote# 当前的current# 注释note 组件# 按钮btn# 输入框ipt 样式命名颜色 使用颜色的名称或者 16 进制代码 .red &#123; color: red; &#125;.f60 &#123; color: #f60; &#125;.ff8600 &#123; color: #ff8600; &#125; 字号 直接使用 “font + 字体大小” .font12px &#123; font-size: 12px; &#125;.font9pt &#123; font-size: 9pt; &#125; 对齐 使用对齐目标的英文名称 .left &#123; float: left; &#125;.bottom &#123; float: bottom; &#125; 标题 使用 “类别+功能” 的方式 .barnews &#123; &#125;.barproduct &#123; &#125; 文件命名 一律小写 尽量用英文 不加中杆和下划线 尽量不缩写，除非一看就明白的单词 # 主要的master.css# 模块module.css# 基本共用base.css# 主题themes.css# 专栏columns.css# 打印print.css# 文字font.css# 表单forms.css# 补丁mend.css# 布局 | 版面layout.css 注释写法/* Footer */内容区/* End Footer */","tags":[{"name":"规范","slug":"规范","permalink":"https://mingfengst.github.io/tags/规范/"}]},{"title":"Node","date":"2014-06-18T14:22:46.000Z","path":"posts/2014/node/","text":"Node 安装到 Node 官网 获取安装包。 检查是否安装成功，能获取到对应版本号，则说明安装成功。 $ node -v$ npm -v 安装 cnpm，如有权限问题，使用 sudo 安装。 $ sudo npm install -g cnpm Node 常用命令# 查看 node 的版本号$ node -v# 查看 npm 的版本号$ npm -v","tags":[{"name":"开发环境","slug":"开发环境","permalink":"https://mingfengst.github.io/tags/开发环境/"},{"name":"node","slug":"node","permalink":"https://mingfengst.github.io/tags/node/"}]},{"title":"Git","date":"2014-06-18T11:38:05.000Z","path":"posts/2014/git/","text":"Git 安装到 Git 官网 获取安装包。 检查是否安装成功，能获取到对应版本号，则说明安装成功。 $ git --version Git 配置设置用户 $ git config --global user.name \"mingfengst\"$ git config --global user.email \"mingfengst@163.com\" 生成公钥密钥 $ ssh-keygen -t rsa -C \"mingfengst@163.com\" # 设置保存的路径，密码（可直接回车跳过） Generating public/private rsa key pair. Enter file in which to save the key (/Users/cmf/.ssh/id_rsa): Created directory '/Users/cmf/.ssh'. Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /Users/cmf/.ssh/id_rsa. Your public key has been saved in /Users/cmf/.ssh/id_rsa.pub. The key fingerprint is: SHA256:zKpiD7O1hT9qTkjB1OXPp0eBvgVfpxKizdPwX7xZMVE mingfengst@163.com The key's randomart image is: +---[RSA 2048]----+ | .. .. .E| | o .. . .| | o . = o . .o | | . X B + + o| | . . S O . o .| | . . . . B o . + | | + + o o . . o | | o*.=. . | | ..=*... | +----[SHA256]-----+ Git 常用命令# 查看 git 的版本号$ git --version# 查看 git 的安装路径（Mac）$ which git# 查看 git 的安装路径（Win）$ where git# 克隆仓库，默认与远程主机的版本库同名。如果要指定不同的目录名，可以将目录名作为第二个参数$ git clone &lt;版本库地址&gt; &lt;本地目录名&gt;# 查看分支$ git branch# 新建分支$ git branch &lt;分支名&gt;# 切换分支$ git checkout &lt;分支名&gt;# 新建并切换到新分支$ git checkout -b &lt;分支名&gt;# $ git add .# $ git commit -m '提交备注'# $ git push origin &lt;分支名&gt;","tags":[{"name":"git","slug":"git","permalink":"https://mingfengst.github.io/tags/git/"},{"name":"开发环境","slug":"开发环境","permalink":"https://mingfengst.github.io/tags/开发环境/"}]},{"title":"Hello World","date":"2014-06-18T05:14:20.000Z","path":"posts/2014/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new \"My New Post\" More info: Writing Run server$ hexo server More info: Server Generate static files$ hexo generate More info: Generating Deploy to remote sites$ hexo deploy More info: Deployment","tags":[]}]