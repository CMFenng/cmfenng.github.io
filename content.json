[{"title":"VS Code 快速获取七牛图床外链","date":"2017-06-19T12:27:17.000Z","path":"blog/2017/vs-code-get-qiniu-img-url/","text":"前言使用 Markdown 编写文档时，难免会遇到插入本地图片的场景，在本地编辑时，插入图片的本地链接，是可以显示的，但是当文件更改路径后，就会出现找不到图片的现象，因此需要将图片通过图床工具上传到七牛空间，获取外链后复制到文档中。这里我们使用 VS Code 安装插件来快速获取七牛图床外链。 下载第一步：进入 Visual Studio Code 官网进行下载 第二步：选择你的电脑操作系统平台，下载合适的安装包 安装第一步：双击下载的安装包，进入安装向导界面，点击下一步 第二步：进入许可协议，点击”我接收协议“选项，点击下一步 第三步：选择目标位置，就是你想把软件安装在哪个目录，选择合适的目录后继续点击下一步 第四步：在开始菜单文件夹中创建快捷方式，可以默认选项，点击下一步 第五步：进入选择其他任务界面，建议保留默认选项，同时也可以选择将打开方式添加到鼠标右键菜单中（勾选“其他”中的第一选项），继续点击下一步 第六步：直接点击安装，几秒后，即可安装完成 第七步：点击完成，即可启动 Visual Studio Code 第八步：VS Code 启动的界面 qiniu-upload-image 插件安装第一步：在 VS Code 界面使用快捷方式Ctrl+P并输入以下命令，回车 ext install qiniu-upload-image 第二步：点击安装 第三步：安装完成后，需要点击重新加载以激活扩展 第四步：打开”文件 - 首选项 - 设置“，可见多了qiniu configuration这项，点击左侧的图标进行编辑 第五步：配置项的介绍 &#123; // 插件开关 \"qiniu.enable\": true, // 一个有效的七牛 AccessKey 签名授权 \"qiniu.access_key\": \"*****************************************\", // 一个有效的七牛 SecretKey 签名授权 \"qiniu.secret_key\": \"*****************************************\", // 七牛图片上传空间 \"qiniu.bucket\": \"image\", // 七牛图片上传路径，参数化命名，暂时支持 $&#123;fileName&#125;、$&#123;mdFileName&#125;、$&#123;date&#125;、$&#123;dateTime&#125; // 示例： // $&#123;fileName&#125;-$&#123;date&#125; -&gt; picName-20160725.jpg // $&#123;mdFileName&#125;-$&#123;dateTime&#125; -&gt; markdownName-20170412222810.jpg \"qiniu.remotePath\": \"$&#123;fileName&#125;\", // 七牛图床域名 \"qiniu.domain\": \"http://xxxxx.xxxx.com\"&#125; 第六步：登录极简图床，点击齿轮图标，切换到”自定义七牛空间”项 第七步：将以上相关信息复制到qiniu configuration配置中并保存即可（有的需要重启软件） 第八步：复制要上传的本地图片链接，输入快捷方式Ctrl+Q启动，粘贴并回车，即可将图片插入到光标所在处 Tips: 只有在编辑 Markdown 时插件才可使用，启动快捷键Ctrl+Q。 参考一个 VS Code 插件，写 Markdown 时可以快捷上传本地图片获取七牛图床外链","tags":[{"name":"工具","slug":"工具","permalink":"https://mingfengst.github.io/tags/工具/"},{"name":"VS Code","slug":"VS-Code","permalink":"https://mingfengst.github.io/tags/VS-Code/"},{"name":"七牛","slug":"七牛","permalink":"https://mingfengst.github.io/tags/七牛/"}]},{"title":"Chrome 开发者工具","date":"2015-07-07T14:10:08.000Z","path":"blog/2015/chrome-dev-tools/","text":"前言Chrome 浏览器想必是每个前端工程师必备的利器之一，速度快、体积小、支持的特性也比其他浏览器多；除此之外，它还拥有强大的控制台功能，但很多开发者并没有用出控制台的精髓，只是使用console.log();其实控制台的功能远不止那么简单。 console既然console能打印出我们想要的信息，那么就试着打印下它自己。 console.log(console); 可见，console也是一个对象，而且除了常用的log()方法外，还有很多实用的方法。那么一起来看看它们有多实用。 assert() console.assert();用于判断表达式，满足表达式时才输出语句 当你想代码在满足某些条件时才在控制台输出信息，那么大可不必用if或者三元表达式来实现，console.assert();就是这样场景下的好方法，它会先对传入的表达式进行断言，表达式为true时不会输出信息，只有表达式为false时才会在控制台输出error信息。 var isTrue = false;console.assert(isTrue, \"条件不满足！\"); clear() console.clear();用于清空控制台 当然，也可以用以下方式： 直接在控制台输入clear() 直接用快捷键Ctrl+L(Win)、Cmd+K(Mac) count() console.count();用于记录代码执行的次数 当想要知道某一段代码被执行了多少次，不用自己去写相关的逻辑，内置的console.count();完全可以胜任这项任务。 function fun() &#123; // 函数体 console.count(\"fun被执行次数\");&#125;fun();fun();fun(); debug()、log()、info()、warn()、error() console.debug();用于输出调试的信息console.log();用于输出一般的信息console.info();用于输出提示的信息console.warn();用于输出警示的信息console.error();用于输出错误的信息 console.debug(\"调试的信息\");console.log(\"一般的信息\");console.info(\"提示的信息\");console.warn(\"警示的信息\");console.error(\"错误的信息\"); 大家都会用log()，但很少有人能够很好地利用warn，error等将输出到控制台的信息进行分类整理。他们功能区别不大，意义在于将输出到控制台的信息进行归类，或者说让它们更语义化。 另外，console.log();可以接收多个参数，参数间用逗号分隔，控制台会根据参数的设置把多个消息打印到同一行。 如果log()里第一个参数是带有特殊标识符的字符串的话，控制台会根据不同的标识符来把后面的参数填充到前面的字符串中去。常见的标识符有： %s表示输出字符串%d表示输出数字（也可以用%i）%f表示输出浮点数值%o表示输出 Dom 元素%O表示输出 JavaScript 对象%c表示对输出的文字应用特殊的样式 var a = 123;var b = [456, \"789\", true];var c = function() &#123; name : \"张三\"; age : 20; sex : \"男\"&#125;console.log(a, b, c);console.log(\"今天%s星期%d\", \"是\", 6);console.log(\"%o\", document.body);console.log(\"%O\", document.body); 最特别的还是%c的用法，可以让控制台输出由你定制样式的内容。例如这样： console.log(\"%cFrom CMF:\", \"color: yellow; background: red; font-size: 20px; border-radius: 5px\", \"Hello World!\"); 还有这样酷炫的： console.log(\"%chello world\",\"background-image:-webkit-gradient(linear, left top, right top, color-stop(0, #f22), color-stop(0.15, #f2f), color-stop(0.3, #22f), color-stop(0.45, #2ff), color-stop(0.6, #2f2), color-stop(0.75, #2f2), color-stop(0.9, #ff2), color-stop(1, #f22) ); color:transparent; -webkit-background-clip: text; font-size:5em;\"); 可以看出%c应用的样式是 CSS 的语法，所以 CSS 支持的样式语句基本上都可以支持。 添加了样式的输出语句貌似看起来没啥用，但是当多人分模块开发一个大型的项目的时候，控制台输出一大堆信息，肯定没办法一下子找到属于自己模块的信息。要是你给自己的模块输出语句添加了具有特色的样式，那么就能较快地定位，这也是提高效率的一个小技巧。 dir() console.dir();用于展开输出一个 DOM 元素的 JavaScript 对象 区别：console.dir();是将 DOM 结点以 JavaScript 对象的形式输出到控制台，而console.log();是直接将 DOM 结点以 DOM 树的结构进行输出，与在元素审查时看到的结构是一致的。 console.log(document.body);console.dir(document.body); 同样，它们也可以以不同的形式打印函数。 function People () &#123; name : \"张三\"; age : 20; sex : \"男\"&#125;console.dir(People);console.log(People); dirxml() console.dirxml();用于查看页面中某个节点的 html/xml 代码 &lt;div id=\"div\"&gt; &lt;p&gt;我在div里面呢&lt;/p&gt;&lt;/div&gt; var div = document.getElementById(\"div\");console.dirxml(div);console.log(div); 效果跟console.log();是一样的。 group() &amp; groupEnd() console.group();和console.groupEnd();配合使用，用于将各自的信息分组到以各自命名空间为名称的组里面。 console.group(\"module_1\");console.log(\"来自 module_1 的普通信息\");console.info(\"来自 module_1 的提示信息\");console.groupEnd();console.group(\"module_2\");console.warn(\"来自 module_2 的警示信息\");console.error(\"来自 module_2 的错误信息\");console.groupEnd(); 这样的控制台信息看上去就一目了然，再也不用为了找这是属于哪一个模块输出的而翻源码。 如果想要输出为折叠模式，可以使用console.groupCollapsed();，用法和console.group();类似。 console.groupCollapsed(\"module_1\");console.log(\"来自 module_1 的普通信息\");console.info(\"来自 module_1 的提示信息\");console.groupEnd();console.groupCollapsed(\"module_2\");console.warn(\"来自 module_2 的警示信息\");console.error(\"来自 module_2 的错误信息\");console.groupEnd(); memory console.memory用于显示此刻使用的内存信息（注意这是一个属性而不是方法） profile() &amp; profileEnd() console.profile();用于记录代码消耗 CPU 的信息 当想要查看 CPU 使用相关的信息时，可以使用console.profile();和console.profileEnd();配合使用来完成这个需求。 console.profile(\"for 循环耗时\");for (var i = 0; i &lt; 10000000; i++) &#123; // 循环体&#125;console.profileEnd(\"for 循环耗时\"); table() console.table();用于以表格的形式输出信息 有的时候后端传回来一大串数据，如果直接console.log();或是通过抓包工具来查看，肯定会让你晕头转向，这个时候console.table();可以发挥作用了，以表格的形式呈现数据，自然一目了然。 而且点击表头还可以对数据进行排序。 var data = &#123; num : 30, students : [ &#123; name : \"张三\", age : 20, sex : \"男\", hobby : \"打篮球\" &#125;, &#123; name : \"李四\", age : 21, hobby : \"打游戏\", sex : \"男\" &#125;, &#123; name : \"王五\", sex : \"女\", age : 18 &#125; ]&#125;;console.table(data.students); time() &amp; timeEnd() console.time();和console.timeEnd();配合使用，用于记录代码运行所消耗的时间 输出一些调试信息只是控制台最常用而且最基本的功能。当做一些性能测试时，同样可以在这里很方便地进行。比如需要考量一段代码执行的耗时情况时。 console.time(\"for 循环耗时\");for (var i = 0; i &lt; 10000000; i++) &#123; // 循环体&#125;console.timeEnd(\"for 循环耗时\"); timeStamp() console.timeStamp();用于标记运行时的 timeline 信息 一些其他指令$_ 表示上一次在控制台键入的命令，也可以用快捷键↑来达到同样的效果 2 + 2 // 回车$_+1 // 再回车得5 $0 ~ $4 可以在控制台输出在Elements面板选中的页面元素$0~$4代表最近 5 个你选择过的 DOM 节点 什么意思呢？在页面右击选择审查元素，然后在弹出来的 DOM 节点树上面随便点选，这些被点过的节点会被记录下来，而$0会返回最近一次选的 DOM 节点，以此类推，$1返回的是上上次选的 DOM 节点，最多保存 5 个，如果不够 5 个，则返回undefined。 另外值得一赞的是，Chrome 控制台中原生支持类 jQuery 的选择器，也就是说你可以用$加上熟悉的 css 选择器来选择 DOM 节点。 &lt;div id=\"div1\"&gt; &lt;p&gt;我在div1里面呢&lt;/p&gt;&lt;/div&gt;&lt;div id=\"div2\"&gt; &lt;p&gt;我在div2里面呢&lt;/p&gt;&lt;/div&gt; $(\"div\");$$(\"div\"); $(selector)返回的是满足选择条件的首个 DOM 元素，其实就是document.querySelector()的封装。$$(selector)返回的是满足选择条件的所有元素的一个集合(数组)，是对document.querySelectorAll()的封装。 $x(path) $x可以用 xPath 的语法来获取页面上的元素，将所匹配的节点放在一个数组里返回 &lt;div id=\"div1\"&gt; &lt;p&gt;我在div1里面呢&lt;/p&gt;&lt;/div&gt;&lt;div id=\"div2\"&gt; &lt;a&gt;我在div2里面呢&lt;/a&gt;&lt;/div&gt; $x(\"//div\"); //匹配所有的div节点$x(\"//div[p]\"); //匹配所有子节点包含p的div节点 copy()copy(document.body); 然后就可以Ctrl+V了。 注意：它不依附于任何全局变量比如 window ，所以其实在 JS 代码里是访问不了这个 copy 方法的。 keys() &amp; values()这是一对基友。 keys();返回传入对象所有属性名组成的数组values();返回传入对象所有属性值组成的数组 具体请看下面的例子： var people = &#123; name : \"张三\", sex : \"男\", age : 20, hobby : \"打篮球\"&#125;;keys(people);values(people); monitor() &amp; unmonitor() monitor(function);接收一个函数名作为参数，比如 function sayHello，每次 sayHello 被执行了，都会在控制台输出一条信息，里面包含了函数的名称 sayHello 及执行时所传入的参数。而unmonitor(function);则是用来停止这一监听。 function sayHello(name) &#123; alert(\"Hello,\" + name);&#125;monitor(sayHello);sayHello(\"CMF\");sayHello(\"HTML5\");unmonitor(sayHello);","tags":[{"name":"工具","slug":"工具","permalink":"https://mingfengst.github.io/tags/工具/"},{"name":"Chrome","slug":"Chrome","permalink":"https://mingfengst.github.io/tags/Chrome/"}]},{"title":"网页命名规则","date":"2014-06-30T16:24:58.000Z","path":"blog/2014/web-naming-rules/","text":"前言规范的命名在程序开发中有明显的优势，它即能让自己日后维护简单，也能让团队友好的合作，在网页开发中，特别是团队合作，命名是非常重要的。 命名规则 内容：content / container 导航：nav 侧栏：sidebar 栏目：column 标志：logo 页面主体：main 广告：banner 热点：hot 新闻：news 下载：download 子导航：subnav 菜单：menu 搜索：search 页脚：footer 滚动：scroll 版权：copyright 友情链接：friendlink 子菜单：submenu 标签页：tab 文章列表：list 注册：regsiter 提示信息：msg 小技巧：tips 加入：joinus 栏目标题：title 指南：guide 服务：service 状态：status 投票：vote 合作伙伴：partner 登录条：loginbar 页面外围控制整体布局宽度：wrapper 左 / 右 / 中：left / right / center 注释的写法/* Footer */内容区/* End Footer */ id 的命名页面结构 容器：container 页头：header 内容：content / container 页面主体：main 页尾：footer 导航：nav 侧栏：sidebar 栏目：column 左 / 右 / 中：left / right / center 页面外围控制整体布局宽度：wrapper 导航 导航：nav 主导航：mainbav 子导航：subnav 顶导航：topnav 边导航：sidebar 左导航：leftsidebar 右导航：rightsidebar 菜单：menu 子菜单：submenu 标题：title 摘要:：summary 功能 标志：logo 广告：banner 登陆：login 登录条：loginbar 注册：regsiter 搜索：search 购物车：shop 标题：title 加入：joinus 状态：status 按钮：btn 滚动：scroll 标签页：tab 文章列表：list 提示信息：msg 当前的：current 小技巧：tips 图标: icon 注释：note 服务：service 热点：hot 新闻：news 下载：download 投票：vote 合作伙伴：partner 友情链接：link 版权：copyright class 的命名颜色 使用颜色的名称或者 16 进制代码 .red &#123; color: red; &#125;.f60 &#123; color: #f60; &#125;.ff8600 &#123; color: #ff8600; &#125; 字体大小 直接使用”font+字体大小”作为名称 .font12px &#123; font-size: 12px; &#125;.font9pt &#123; font-size: 9pt; &#125; 对齐样式 使用对齐目标的英文名称 .left &#123; float: left; &#125;.bottom &#123; float: bottom; &#125; 标题栏样式 使用”类别+功能”的方式命名 .barnews &#123; &#125;.barproduct &#123; &#125; 注意事项 一律小写 尽量用英文 不加中杆和下划线 尽量不缩写，除非一看就明白的单词 主要的：master.css 模块：module.css 基本共用：base.css 主题：themes.css 专栏：columns.css 打印：print.css 文字：font.css 表单：forms.css 补丁：mend.css 布局 / 版面：layout.css","tags":[{"name":"命名规范","slug":"命名规范","permalink":"https://mingfengst.github.io/tags/命名规范/"}]},{"title":"Hexo+GitHub 搭建个人博客","date":"2014-06-18T06:20:16.000Z","path":"blog/2014/blog-with-hexo-and-github/","text":"前言Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。本文是一篇基于 GitHub Pages 的 Hexo 博客搭建教程。 准备安装 Hexo 相当简单。然而在安装前，您必须检查电脑中是否已安装下列应用程序： Git Node.js 检查方法：打开命令行界面，依次输入以下命令，能够返回版本号表示已经安装成功 # node 的版本号，例如我的是：v6.9.1node -v# npm 的版本号，例如我的是：3.10.8npm -v# git 的版本号，例如我的是：git version 2.12.0.windows.1git --version 如果您的电脑中尚未安装所需要的程序，请根据以下安装指示完成安装。 注意：从官方链接下载安装包可能需要翻墙！ Git安装 Git下载 Git 安装包 并安装 安装过程建议保持默认设置，一路 next！ 注册 GitHub进入 GitHub 官网，已经有 GitHub 账号的可以直接 登录，还没有的需要 注册，根据提示输入用户名、Email、密码即可完成注册。 注意：GitHub 账号用户名一旦注册成功就不能修改。比如我的用户名是 mingfengst 创建博客仓库登录 GitHub 账号，点击页面右上角的 +，选择 New repository 博客仓库名必须是：用户名.github.io。比如我的博客仓库名是：mingfengst.github.io 开启 gh-pages 功能点击界面右侧的 Settings，将会打开这个库的 setting 页面，向下拖动，直到看见 GitHub Pages，点击 Automatic page generator，GitHub 将会自动替你创建出一个 gh-pages 的页面。如果配置没问题的话，用户名.github.io 这个网址就可以正常访问了 配置 SSH 打开 git bash 终端，设置 user.name 和 user.email git config --global user.name \"你的 GitHub 用户名\"git config --global user.email \"你的 GitHub 注册邮箱\" 生成 ssh 密钥 ssh-keygen -t rsa -C \"你的 GitHub 注册邮箱\" 此时，在用户文件夹下就会有一个新的文件夹.ssh，里面有刚刚创建的 ssh 密钥文件 id_rsa 和 id_rsa.pub。 添加密钥到 GitHub用户头像 → Settings → SSH and GPG keys → New SSH key → 将 id_rsa.pub 中的内容复制到Key文本框中，然后点击 Add SSH key (添加SSH)按钮。 NodeJS下载 Node.js 安装包 并安装 跟 Git 的安装一样，建议保持默认设置，但出于操作方便考虑，可以将 PATH 选项按照下图选择： Git 的默认设置下，出于安全考虑，只有在 Git Bash 中才能进行 Git 的相关操作。按照上图的选择，将会使得 Git 安装程序在系统 PATH 中加入 Git 的相关路径，这样就可以在 CMD 界面下调用 Git，不用打开 Git Bash。 设置 npm 淘宝镜像站npm 默认源的下载速度可能很慢，建议替换成淘宝镜像。执行以下命令即可。 npm config set registry \"https://registry.npm.taobao.org\" Hexo 安装 Hexo 如果您的电脑中已经安装上述必备程序，那么只需要使用 npm 即可完成 Hexo 的安装。 npm install -g hexo-cli 检测安装是否成功的方法： hexo -v 返回以下： hexo-cli: 1.0.3os: Windows_NT 6.1.7601 win32 x64http_parser: 2.7.0node: 6.9.1v8: 5.1.281.84uv: 1.9.1zlib: 1.2.8ares: 1.10.1-DEVicu: 57.1modules: 48openssl: 1.0.2j 初始化 hexo init 安装依赖包 npm install 生成静态页面 hexo g 本地启动测试 hexo s INFO Start processingINFO Hexo is running at http://localhost:4000/. Press Ctrl+C to stop. 打开浏览器，地址栏中输入：http://localhost:4000/，应该可以看见刚刚创建的博客了。 部署部署到 GitHub注册 GitHub 账号 新建 repository 部署 注意：type: git中的冒号后面由空格。注意：将 git@github.com:xuezhisd/xuezhisd.github.io.git 中的用户名换成自己的用户名 git@github.com:github_username/github_username.github.io.git。 部署 hexo 输入下面的命令将 hexo 博客部署到 github 中： # 清空静态页面hexo clean# 生成静态页面hexo generate# 部署 hexo deploy 打开网页，输入 http://github_username.github.io，打开 github 上托管的博客。如我的博客地址是：http://xuezhisd.github.io。 问题 为什么访问 http://localhost:4000/，无反应？ 解决方法：可能是由于端口问题引起的。使用 Ctrl+C 中断本地服务，使用命令hexo s -p 5000 重新开启本地服务，访问 http://localhost:5000/ 可以看到博客页面了。 常见问题hexo deploy 没有反应？ 修改配置文件：_config.yml 时，冒号后面没加空格。 hexo s 网站打不开？ 端口占用，换个端口就好了。执行命令 hexo s -p 5000，并在浏览器地址栏输入 http://localhost:5000，回车访问。 如何换主题？ 将主题下载后，放到 themes 文件夹中即可。例如，下面命令安装 next 主题：git clone https://github.com/iissnan/hexo-theme-next themes/next。 未完待续。。。。。。。。。。。。","tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://mingfengst.github.io/tags/Hexo/"},{"name":"GitHub","slug":"GitHub","permalink":"https://mingfengst.github.io/tags/GitHub/"},{"name":"博客","slug":"博客","permalink":"https://mingfengst.github.io/tags/博客/"}]},{"title":"Hello World","date":"2014-06-18T05:14:20.000Z","path":"blog/2014/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new \"My New Post\" More info: Writing Run server$ hexo server More info: Server Generate static files$ hexo generate More info: Generating Deploy to remote sites$ hexo deploy More info: Deployment","tags":[]}]