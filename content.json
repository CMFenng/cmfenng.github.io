[{"title":"命名规则","date":"2014-06-30T16:24:58.000Z","path":"posts/2014/naming-rule/","text":"前言规范的命名在程序开发中有明显的优势，它即能让自己日后维护简单，也能让团队友好的合作，在网页开发中，特别是团队合作，命名是非常重要的。 页面命名页面结构# 外围wrapper# 主体main# 内容content | container# 页头header# 页脚 | 页尾footer# 中middle | center# 上top# 下bottom# 左left# 右right 页面分区# 菜单menu# 子菜单submenu# 标题title# 标志logo# 图标icon# 导航nav# 主导航mainbav# 子导航subnav# 顶导航topnav# 边导航 | 侧栏sidebar# 栏目 | 纵栏column# 左导航leftsidebar# 右导航rightsidebar# 标签页tab# 登录条loginbar# 购物车shop# 广告banner# 热点hot# 新闻news# 摘要summary# 文章列表list# 状态status# 提示信息msg# 小技巧tips# 指南guide# 服务service# 加入joinus# 版权copyright# 友情链接friendlink | link# 合作伙伴partner 功能# 登录login | log# 注册regsiter | reg# 下载download# 搜索search# 滚动scroll# 投票vote# 当前的current# 注释note 组件# 按钮btn# 输入框ipt 样式命名颜色 使用颜色的名称或者 16 进制代码 .red &#123; color: red; &#125;.f60 &#123; color: #f60; &#125;.ff8600 &#123; color: #ff8600; &#125; 字号 直接使用 “font + 字体大小” .font12px &#123; font-size: 12px; &#125;.font9pt &#123; font-size: 9pt; &#125; 对齐 使用对齐目标的英文名称 .left &#123; float: left; &#125;.bottom &#123; float: bottom; &#125; 标题 使用 “类别+功能” 的方式 .barnews &#123; &#125;.barproduct &#123; &#125; 文件命名 一律小写 尽量用英文 不加中杆和下划线 尽量不缩写，除非一看就明白的单词 # 主要的master.css# 模块module.css# 基本共用base.css# 主题themes.css# 专栏columns.css# 打印print.css# 文字font.css# 表单forms.css# 补丁mend.css# 布局 | 版面layout.css 注释写法/* Footer */内容区/* End Footer */","tags":[{"name":"规范","slug":"规范","permalink":"https://mingfengst.github.io/tags/规范/"}]},{"title":"Hexo+GitHub 搭建个人博客","date":"2014-06-19T06:20:16.000Z","path":"posts/2014/blog-base-on-hexo-and-github/","text":"前言Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。本文是一篇基于 GitHub Pages 的 Hexo 博客搭建教程。 准备安装前提安装 Hexo 相当简单。然而在安装前，先检查电脑中是否已安装下列应用程序： Git Node.js 安装方法：参考文章 Git 的用法、Node 的用法。 检查方法：打开终端，依次输入以下命令，能获取到对应版本号，则说明安装成功。 # 查看 node 的版本号node -v# 查看 npm 的版本号npm -v# 查看 git 的版本号git --version 创建 blog 仓库登录 GitHub 账号，点击页面右上角的 +，选择 New repository。 博客仓库名必须是：username.github.io。比如我的博客仓库名是：mingfengst.github.io。 Jietu20180312-164955 开启 gh-pages点击界面右侧的 Settings，将会打开这个库的 setting 页面，向下拖动，直到看见 GitHub Pages，点击 Automatic page generator，GitHub 将会自动替你创建出一个 gh-pages 的页面。如果配置没问题的话，username.github.io 这个网址就可以正常访问了。 Jietu20180312-165843 安装 Hexo如果电脑中已具备以上条件，那么只需要使用 npm 即可完成 Hexo 的全局安装。如有权限问题，使用 sudo 安装。 $ npm install -g hexo-cli$ sudo npm install -g hexo-cli 检查是否安装成功，能获取到对应版本号，则说明安装成功。 $ hexo -v Hexo 常用命令# 清空静态页面$ hexo clean# 生成静态页面$ hexo generate$ hexo g# 本地测试$ hexo server$ hexo s# 部署$ hexo deploy$ hexo d 创建 blog 项目初始化 hexo 项目，文件名以 blog 为例。 $ hexo init blog 进入 blog 目录 $ cd blog 安装依赖 $ npm install 生成静态页面 $ hexo generate 本地启动测试 $ hexo server INFO Start processing INFO Hexo is running at http://localhost:4000/. Press Ctrl+C to stop. Jietu20180312-211146 打开浏览器，地址栏中输入：http://localhost:4000/ ，即可看见刚刚创建的博客了。 部署 blog 项目安装 hexo-deployer-git。 $ npm install hexo-deployer-git --save 修改 _config.yml 配置文件。 # Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git # 库（Repository）地址 repo: git@github.com:mingfengst/mingfengst.github.io.git # 分支名称。如果您使用的是 GitHub 或 GitCafe 的话，程序会尝试自动检测。 branch: master # 自定义提交信息 (默认为 Site updated: &#123;&#123; now('YYYY-MM-DD HH:mm:ss') &#125;&#125;) message: 注意： type: git 中的冒号后面有空格。 将 repo 替换成自己的 repository。 部署。 $ hexo deploy 打开浏览器，在地址栏输入 https://username.github.io 即可访问托管在 GitHub 上的博客。如我的博客地址是：https://mingfengst.github.io 。 更改 blog 配置https://hexo.io/zh-cn/docs/configuration.html 更换 blog 主题以 hexo-theme-indigo 为例。 主题安装要求：Hexo 版本在 3.0 以上，Node 版本为 6.x 以上。 进入 blog 目录，下载主题。 $ git clone git@github.com:yscoder/hexo-theme-indigo.git themes/indigo 切换主题进入 themes/indigo 目录。 $ cd themes/indigo 执行 git branch 显示所有本地分支，如果只存在一个分支，可以执行下面的命令获取另一分支的主题。 $ git branch * card# 获取远程 card 分支，并切换$ git checkout -b card origin/card# 获取远程 master 分支，并切换$ git checkout -b master origin/master 此命令只需执行一次，之后使用 git checkout [branch] 命令在两个主题之间切换。 依赖安装回到 blog 目录。 $ cd ../.. less主题默认使用 less 作为 css 预处理工具。 $ npm install hexo-renderer-less --save feedhexo-generator-feed 用于生成 rss。 $ npm install hexo-generator-feed --save json-content用于生成静态站点数据，用作站内搜索的数据源。 为了节约资源，可以对 jsonContent 插件生成的数据字段进行配置，减少数据文件大小。参考 hexo-generator-json-content。 $ npm install hexo-generator-json-content --save QRCode用于生成微信分享二维码。可选，不安装时会请求 jiathis Api 生成二维码。 $ npm install hexo-helper-qrcode --save 开启标签页$ hexo new page tags INFO Created: ~/dev/blog/source/tags/index.md 修改 blog/source/tags/index.md 的元数据 ---title: tagsdate: 2017-06-18 18:35:37layout: tagscomments: false--- 开启分类页# 仅 card theme 支持$ hexo new page categories INFO Created: ~/dev/blog/source/categories/index.md 修改 blog/source/categories/index.md 的元数据 ---title: categoriesdate: 2017-06-18 18:41:23layout: categoriescomments: false--- 主题配置hexo-theme-indigo 备份 blog 源码hexo-git-backup Jietu20180312-221423 $ ssh -T git@gitee.com Welcome to Gitee.com, CMF! 安装 hexo-git-backup # 如果 hexo 版本号是 2.x.x$ npm install hexo-git-backup@0.0.91 --save# 如果 hexo 版本号是 3.x.x$ npm install hexo-git-backup --save 配置 blog/_config.yml backup: type: git # 备份主题 ## theme: your theme name,your theme name ## theme/your theme name/.git 将会被移除 theme: indigo,landscape # 提交信息 message: update # 仓库 repository: github: git@github.com:xxx/xxx.git,branchName gitcafe: git@gitcafe.com:xxx/xxx.git,branchName gitee: git@gitee.com:xxx/xxx.git,branchName 使用，如有权限问题，使用 sudo $ hexo backup# 或者$ hexo b 克隆 blog 源码具备 Git、Node、Hexo 等环境后，执行以下命令。 $ git clone git@gitee.com:xxx/xxx.git blog$ cd blog$ npm install$ hexo server 批处理 Q&amp;A访问 http://localhost:4000/ 无反应？ 一般是端口占用的原因。使用 Ctrl+C 中断本地服务，执行命令 hexo s -p 5000 更改端口号并重新开启本地服务，访问 http://localhost:5000/ 即可。 hexo deploy 没反应？ 修改配置文件：_config.yml 时，冒号后面没加空格。 hexo backup 出错？ $ hexo backup Please make sure you have the correct access rights and the repository exists. ERROR: Repository not found. fatal: Could not read from remote repository. .git 中已经配置了远程仓库，导致更换仓库地址后出现这个问题，删掉 blog 目录中的 .git 文件夹，重新执行 hexo backup 。","tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://mingfengst.github.io/tags/Hexo/"},{"name":"GitHub","slug":"GitHub","permalink":"https://mingfengst.github.io/tags/GitHub/"}]},{"title":"Node 的用法","date":"2014-06-18T12:22:46.000Z","path":"posts/2014/usage-node/","text":"Node 安装到 Node 官网 获取安装包。 注意：从官方链接下载安装包可能需要翻墙！ 安装过程建议保持默认设置，一路 next！但出于操作方便考虑，可以将 PATH 选项按照下图选择： Jietu20170620-151437 Git 的默认设置下，出于安全考虑，只有在 Git Bash 中才能进行 Git 的相关操作。按照上图的选择，将会使得 Git 安装程序在系统 PATH 中加入 Git 的相关路径，这样就可以在 CMD 界面下调用 Git，不用打开 Git Bash。 检查是否安装成功，能获取到对应版本号，则说明安装成功。 $ node -v$ npm -v 安装 cnpm，如有权限问题，使用 sudo 安装。 $ sudo npm install -g cnpm 设置 npm 淘宝镜像npm 默认源的下载速度可能很慢，建议替换成淘宝镜像。 $ npm config set registry \"https://registry.npm.taobao.org\" Node 常用命令# 查看 node 的版本号$ node -v# 查看 npm 的版本号$ npm -v","tags":[{"name":"开发环境","slug":"开发环境","permalink":"https://mingfengst.github.io/tags/开发环境/"},{"name":"node","slug":"node","permalink":"https://mingfengst.github.io/tags/node/"}]},{"title":"Git 的用法","date":"2014-06-18T07:32:05.000Z","path":"posts/2014/usage-git/","text":"Git 安装到 Git 官网 获取安装包。 注意：从官方链接下载安装包可能需要翻墙！ 安装过程建议保持默认设置，一路 next！ 检查是否安装成功，能获取到对应版本号，则说明安装成功。 $ git --version 注册 GitHub进入 GitHub 官网，已经有 GitHub 账号的可以直接 登录，还没有的需要 注册，根据提示输入用户名、Email、密码即可完成注册。 注意：GitHub 账号用户名一旦注册成功就不能修改。比如我的用户名是 mingfengst Git 配置配置 SSH在终端设置 user.name 和 user.email $ git config --global user.name \"your github user.name\"$ git config --global user.email \"your github user.email\" 生成 ssh 密钥 $ ssh-keygen -t rsa -C \"your github user.email\" # 设置保存的路径，密码（可直接回车跳过） Generating public/private rsa key pair. Enter file in which to save the key (/Users/cmf/.ssh/id_rsa): Created directory '/Users/cmf/.ssh'. Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /Users/cmf/.ssh/id_rsa. Your public key has been saved in /Users/cmf/.ssh/id_rsa.pub. The key fingerprint is: SHA256:XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX your github user.email The key's randomart image is: +---[RSA 2048]----+ | .. .. .X| | o .. . .| | o . = o . .o | | . X X + + o| | . . X O . o .| | . . . . X o . + | | + + o o . . o | | o*.=. . | | ..=*... | +----[SHA256]-----+ 此时，在用户文件夹下就会有一个新的文件夹.ssh，里面有刚刚创建的 ssh 密钥文件 id_rsa 和 id_rsa.pub。 添加 SSH 到 GitHub用户头像 → Settings → SSH and GPG keys → New SSH key → 将 id_rsa.pub 中的内容复制到 Key 文本框中，然后点击 Add SSH key（添加 SSH）按钮。 Jietu20180301-230037 Git 常用命令# 查看 git 的版本号$ git --version# 查看 git 的安装路径（Mac）$ which git# 查看 git 的安装路径（Win）$ where git# 克隆仓库，默认与远程主机的版本库同名。如果要指定不同的目录名，可以将目录名作为第二个参数$ git clone &lt;版本库地址&gt; &lt;本地目录名&gt;# 查看分支，* 为当前分支$ git branch# 新建分支$ git branch &lt;分支名&gt;# 切换分支$ git checkout &lt;分支名&gt;# 新建并切换到新分支$ git checkout -b &lt;分支名&gt;# $ git add .# $ git commit -m '提交备注'# $ git push origin &lt;分支名&gt;# $ git update-ref -d HEAD","tags":[{"name":"git","slug":"git","permalink":"https://mingfengst.github.io/tags/git/"},{"name":"开发环境","slug":"开发环境","permalink":"https://mingfengst.github.io/tags/开发环境/"}]},{"title":"Hello World","date":"2014-06-18T05:14:20.000Z","path":"posts/2014/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new \"My New Post\" More info: Writing Run server$ hexo server More info: Server Generate static files$ hexo generate More info: Generating Deploy to remote sites$ hexo deploy More info: Deployment","tags":[]}]