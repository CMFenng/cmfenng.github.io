<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>mingfengst&#39;blog</title>
  
  <subtitle>Just Do IT</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://mingfengst.github.io/"/>
  <updated>2018-06-26T10:15:17.272Z</updated>
  <id>https://mingfengst.github.io/</id>
  
  <author>
    <name>mingfengst</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>幸运转盘（canvas）</title>
    <link href="https://mingfengst.github.io/posts/2018/canvas-lucky-draw/"/>
    <id>https://mingfengst.github.io/posts/2018/canvas-lucky-draw/</id>
    <published>2018-06-06T10:06:06.000Z</published>
    <updated>2018-06-26T10:15:17.272Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>作为消费者，我们经常可以在双 11、双 12、618 等节日中看到拼手气的「幸运转盘」活动，大家都想成为那个幸运儿。那么，今天我们就用 canvas 来实现一个「幸运转盘」的案例，都来成为那个幸运儿。</p><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><ol><li>在页面上提供文件选择入口，并说明使用方法；</li><li>读取按要求编写的 txt 文件，解析出奖项及其中奖概率；</li><li>获取 canvas 元素，绘制转盘，注册点击事件；</li><li>产生随机数，实现转盘过渡效果；</li><li>自定义弹出框，展示抽奖结果。</li></ol><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="文件入口"><a href="#文件入口" class="headerlink" title="文件入口"></a>文件入口</h3><p>文件的入口实现起来非常简单，直接用 HTML 提供的 input 交互式控件，设置 type 属性值为 file，accept 属性值为 .txt，限制可接受的文件类型，并且给控件绑定 change 事件。</p><p>另外，需要跟使用者说明文件规定的文本格式，以便能够正确解析出需要的数据。</p><p>主要代码如下：</p><pre><code class="html">&lt;div id=&quot;fileBox&quot; class=&quot;frame center&quot;&gt;    &lt;a class=&quot;btn no-select&quot;&gt;        &lt;input type=&quot;file&quot; accept=&quot;.txt&quot; onchange=&quot;getFileDate(event)&quot;&gt;选 择 文 件    &lt;/a&gt;    &lt;div id=&quot;describe&quot;&gt;        &lt;p&gt;文件要求：&lt;/p&gt;        &lt;p&gt;            格式：奖项=百分比(值越高越容易抽中)&lt;br&gt;            &lt;br&gt;            一等奖=5&lt;br&gt;            二等奖=7&lt;br&gt;            三等奖=10&lt;br&gt;            四等奖=15&lt;br&gt;            五等奖=18&lt;br&gt;            六等奖=20&lt;br&gt;            谢谢参与=25        &lt;/p&gt;    &lt;/div&gt;&lt;/div&gt;&lt;div id=&quot;canvasBox&quot; class=&quot;no-select hide&quot;&gt;    &lt;canvas id=&quot;plate&quot; width=&quot;600&quot; height=&quot;600&quot;&gt;        浏览器不支持！    &lt;/canvas&gt;    &lt;canvas id=&quot;pointer&quot; width=&quot;200&quot; height=&quot;200&quot;&gt;        浏览器不支持！    &lt;/canvas&gt;    &lt;button id=&quot;btn&quot;&gt;开始&lt;/br&gt;抽奖&lt;/button&gt;&lt;/div&gt;</code></pre><p>页面结构就这么简单，但是默认的样式实在看不下去，我们重新定义下样式吧。</p><p>为了避免篇幅过长，css 代码就不在文章中贴出来了，代码已经托管到 GitHub，链接会在文章结尾给出。</p><p>截图如下，是不是好看多了：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://p9uf55ibt.bkt.clouddn.com/mingfengst/180606160131.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h3><p>新建一个文本文件，内容如下：</p><pre><code class="txt">一等奖=5二等奖=7三等奖=10四等奖=15五等奖=18六等奖=20谢谢参与=25</code></pre><p>这里使用了符号 <code>=</code> 进行字符串的分割，左侧是「奖项」，右侧是此奖项的「中奖概率」。特别注意的是，中奖概率之和肯定不能低于或者超过 100%，而且「奖项」和「中奖概率」是一一对应的关系。</p><p>HTML5 定义了 FileReader 用于读取存储在用户计算机上的文件的内容，正好符合我们的需求，部分代码如下：</p><pre><code class="javascript">function getFileDate(e) {    let file = e.target.files[0];    if (file) {        let reader = new FileReader();        // 文件加载成功        reader.onload = function(event) {            // 处理数据            let data = handleData(event.target.result);            if (data !== undefined) {                initPlate(data);            } else {                // 文件数据出错，清空文件选择框的值                e.target.value = &quot;&quot;;            }        };        // 加载文本        reader.readAsText(file);    }}</code></pre><p>得到文件的文本数据之后，需要对数据进行解析：</p><pre><code class="javascript">function handleData(data) {    let itemArr = data.split(&quot;\n&quot;);    let result = {};    // 存放奖项    result.text = [];    // 存放百分比    result.radio = [];    for (let i = 0; i &lt; itemArr.length; i++) {        if (itemArr[i] === &quot;&quot;) {            continue;        } else {            let itemKey = itemArr[i].split(&quot;=&quot;)[0];            let itemVal = itemArr[i].split(&quot;=&quot;)[1];            result.text.push(itemKey);            if (itemVal !== &quot;&quot; &amp;&amp; !isNaN(+itemVal) &amp;&amp; typeof (+itemVal) == &quot;number&quot;) {                result.radio.push(+itemVal);            }        }    }    // 奖项和百分比不能一一对应    if (result.text.length !== result.radio.length) {        alert(&quot;文件错误！&quot;);        return;    // 百分比相加不等于 100    } else if (eval(result.radio.join(&quot;+&quot;)) !== 100) {        alert(&quot;百分比错误！&quot;);        return;    } else {        return result;    }}</code></pre><p>如果能够正常解析数据，那么 result 的值是这样的：</p><pre><code class="javascript">{    radio: [5, 7, 10, 15, 18, 20, 25],    text: [&quot;一等奖&quot;, &quot;二等奖&quot;, &quot;三等奖&quot;, &quot;四等奖&quot;, &quot;五等奖&quot;, &quot;六等奖&quot;, &quot;谢谢参与&quot;]}</code></pre><h3 id="初始化转盘"><a href="#初始化转盘" class="headerlink" title="初始化转盘"></a>初始化转盘</h3><p>转盘主要分解为两部分：圆盘、指针。</p><p>这两部分都是用 canvas 来绘制，所以我们要先获取到页面中的 canvas 元素，再分别绘制这两个部分。</p><p>主要代码如下：</p><pre><code class="javascript">function initPlate(data) {    let plateCanvas = document.getElementById(&quot;plate&quot;);    let plateCtx = plateCanvas.getContext(&quot;2d&quot;);    let pointerCanvas = document.getElementById(&quot;pointer&quot;);    let pointerCtx = pointerCanvas.getContext(&quot;2d&quot;);    let btn = document.getElementById(&quot;btn&quot;);    let lineW = 5;    let num = data.text.length;    let sectorDeg = 360 / num;    let deg = Math.PI / 180;    let round = 0;    let initCircleDeg = -90-sectorDeg/2;    initCircle();    initPointer();    // 注册点击事件    btn.onclick = function () {        let randomNum = Math.random()*100;    // [0, 100)        round++;        data.radio.reduce((prev, curv, i) =&gt; {            if (randomNum &gt;= prev &amp;&amp; randomNum &lt; prev + curv) {                runPlate(i, prev);            }            return prev + curv;        }, 0);    };    function runPlate(i) {        btn.setAttribute(&quot;disabled&quot;, &quot;true&quot;);        // 定时弹出框弹出        setTimeout(function () {            alert(data.text[i]);        }, 6500);        plateCanvas.style.transform = `rotate(${ initCircleDeg + 3600*round + sectorDeg*(num-i) }deg)`;    }}</code></pre><p>可以看出，我们声明了一些变量，初始化线宽，初始角度等。圆盘和指针的绘制分别用函数 <code>initCircle</code> 和 <code>initPointer</code> 来完成，后面再单独说明。除此之外，声明了转盘转动的方法，并注册了点击事件，在点击事件的处理函数里产生了随机数。</p><h3 id="绘制圆盘"><a href="#绘制圆盘" class="headerlink" title="绘制圆盘"></a>绘制圆盘</h3><p>圆盘是由多个扇形拼接而成的，解析完文件的文本数据之后，就可以知道扇形的数量、角度。由于每个扇形的绘制过程都是一个重复性的过程，所以我们封装一个方法来实现：</p><pre><code class="javascript">/** * @param ctx   canvas 的 context 实例 * @param x     x 轴坐标 * @param y     y 轴坐标 * @param r     半径 * @param sDeg  扇形开始的弧度 * @param eDeg  扇形结束的弧度 * @param text  文本 */function drawSector(ctx, x, y, r, sDeg, eDeg, text) {    ctx.save();    ctx.translate(x, y);    ctx.beginPath();    ctx.arc(0, 0, r, sDeg, eDeg);    ctx.lineWidth = lineW;    ctx.strokeStyle = &quot;#40AA53&quot;;    ctx.stroke();    ctx.lineWidth = 1;    ctx.strokeStyle = &quot;#40AA53&quot;;    ctx.save();    ctx.rotate(sDeg);    ctx.lineTo(0, 0);    ctx.stroke();    ctx.lineTo(r, 0);    ctx.stroke();    ctx.fillStyle = &quot;#0ff&quot;;    ctx.fill();    ctx.moveTo(0, 0);    ctx.restore();    ctx.save();    ctx.rotate(Math.PI/2 + eDeg-(eDeg-sDeg)/2);    ctx.fillStyle = &quot;#cc0000&quot;;    ctx.font = &quot;30px Microsoft YaHei&quot;;    ctx.textAlign = &quot;center&quot;;    ctx.fillText(text, 0, -r*2/3);    ctx.restore();    ctx.closePath();    ctx.restore();}</code></pre><p>可能看代码不够形象，可以看看动画：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://p9uf55ibt.bkt.clouddn.com/mingfengst/Gif180605235047.gif" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>封装完绘制扇形的方法，就可以根据「奖项」的数量来循环绘制扇形，从而拼接成圆盘：</p><pre><code class="javascript">function initCircle() {    plateCanvas.style.transform = `rotate(${ initCircleDeg }deg)`;    let plateCenterX = plateCanvas.width/2;    let plateCenterY = plateCanvas.height/2;    let plateR = plateCenterX &lt; plateCenterY ? plateCenterX-lineW : plateCenterY-lineW;    for (let i = 0; i &lt; num; i++) {        drawSector(plateCtx, plateCenterX, plateCenterY, plateR, sectorDeg*i*deg, sectorDeg*(i+1)*deg, data.text[i]);    }    plateCanvas.style.transition = `transform 6s`;}</code></pre><p>从上面的代码可以看出，为了让第一个「奖项」位于圆盘的正上方，将圆盘进行了旋转，并设置了 6s 的过渡时长，为后面转动转盘做准备。</p><h3 id="绘制指针"><a href="#绘制指针" class="headerlink" title="绘制指针"></a>绘制指针</h3><p>指针是要固定要圆盘的中心的，并且将指针的方向指向了圆盘的正上方，实现的代码如下：</p><pre><code class="javascript">function initPointer() {    pointerCanvas.style.transform = `translate(-50%, -50%) rotate(-90deg)`;    let pointerCenterX = pointerCanvas.width/2;    let pointerCenterY = pointerCanvas.height/2;    let pointerR = pointerCenterX &lt; pointerCenterY ? pointerCenterX/2 : pointerCenterY/2;    pointerCtx.save();    pointerCtx.beginPath();    pointerCtx.arc(pointerCenterX, pointerCenterY, pointerR, Math.PI/10, Math.PI*2-Math.PI/10);    pointerCtx.lineTo(pointerCenterX+pointerR*2, pointerCenterY);    pointerCtx.closePath();    pointerCtx.fillStyle = &quot;#ff0000&quot;;    pointerCtx.fill();}</code></pre><p>到这里，绘制过程就完成了，来看看转盘的效果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://p9uf55ibt.bkt.clouddn.com/mingfengst/180606161207.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="自定义弹出框"><a href="#自定义弹出框" class="headerlink" title="自定义弹出框"></a>自定义弹出框</h3><p>浏览器默认的弹出框样式跟我们案例的风格明显不符，我们来试下自定义下：</p><pre><code class="javascript">&lt;script&gt;    window.alert = function (str) {        let alertBox = document.createElement(&quot;div&quot;);        alertBox.id = &quot;alertBox&quot;;        alertBox.className = &quot;frame center no-select&quot;;        let htmlStr = `            &lt;div id=&quot;title&quot;&gt;抽奖结果&lt;/div&gt;            &lt;div id=&quot;info&quot;&gt;${ str }&lt;/div&gt;            &lt;button class=&quot;btn&quot; onclick=&quot;doOk()&quot;&gt;确 定&lt;/button&gt;        `;        alertBox.innerHTML = htmlStr;        document.body.appendChild(alertBox);        this.doOk = function(){            document.body.removeChild(alertBox);            // 重新使能按钮            document.getElementById(&quot;btn&quot;).removeAttribute(&quot;disabled&quot;);        };        alertBox.focus();    }&lt;/script&gt;</code></pre><p>直接上效果图：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://p9uf55ibt.bkt.clouddn.com/mingfengst/180606175322.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>怎么样？整体风格是不是好很多？</p><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p>🔗<a href="https://github.com/mingfengst/demo/tree/master/%E5%B9%B8%E8%BF%90%E8%BD%AC%E7%9B%98" target="_blank" rel="noopener">看看有详细注释的源码</a><br>🔗<a href="http://htmlpreview.github.io/?https://github.com/mingfengst/demo/blob/master/%E5%B9%B8%E8%BF%90%E8%BD%AC%E7%9B%98/index.html" target="_blank" rel="noopener">在线预览，体验一波</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;作为消费者，我们经常可以在双 11、双 12、618 等节日中看到拼手气的「幸运转盘」活动，大家都想成为那个幸运儿。那么，今天我们就用 ca
      
    
    </summary>
    
      <category term="技术" scheme="https://mingfengst.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Web" scheme="https://mingfengst.github.io/categories/%E6%8A%80%E6%9C%AF/Web/"/>
    
    
      <category term="Demo" scheme="https://mingfengst.github.io/tags/Demo/"/>
    
      <category term="Canvas" scheme="https://mingfengst.github.io/tags/Canvas/"/>
    
  </entry>
  
  <entry>
    <title>Node 的基本用法</title>
    <link href="https://mingfengst.github.io/posts/2016/usage-node/"/>
    <id>https://mingfengst.github.io/posts/2016/usage-node/</id>
    <published>2016-06-18T05:22:46.000Z</published>
    <updated>2018-06-26T10:14:37.422Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Node-的安装"><a href="#Node-的安装" class="headerlink" title="Node 的安装"></a>Node 的安装</h2><p>Node 的安装方式很简单，只要到 🔗<a href="https://nodejs.org/" target="_blank" rel="noopener">Node 的官网</a> 下载好安装包然后双击安装即可。</p><p>安装的过程建议保持默认设置，一路 next！但出于操作方便考虑，可以将 PATH 选项按照下图选择：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://p9uf55ibt.bkt.clouddn.com/mingfengst/180614180031.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>出于安全考虑，Git 的默认设置下，只有在 Git Bash 中才能进行 Git 的相关操作。在安装过程中，可以选择 <code>Use Git from the Windows Command Prompt</code>，将 Git 安装程序在系统 PATH 中加入 Git 的相关路径，这样就可以在 CMD 命令行下调用 Git，不需要打开 Git Bash。</p><p>macOS 可以使用 homebrew 进行安装：</p><pre><code class="bash">$ brew install node</code></pre><p>安装完成后，检查是否安装成功，能获取对应版本号说明安装成功：</p><pre><code class="bash"># 查看 node 的版本号$ node -v# 查看 npm 的版本号$ npm -v</code></pre><p>安装 cnpm，如有权限问题，使用 sudo 安装：</p><pre><code class="bash">$ sudo npm install -g cnpm</code></pre><h2 id="设置-npm-淘宝镜像"><a href="#设置-npm-淘宝镜像" class="headerlink" title="设置 npm 淘宝镜像"></a>设置 npm 淘宝镜像</h2><p>npm 默认源的下载速度可能很慢，建议替换成淘宝镜像：</p><pre><code class="bash">$ npm config set registry &quot;https://registry.npm.taobao.org&quot;</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Node-的安装&quot;&gt;&lt;a href=&quot;#Node-的安装&quot; class=&quot;headerlink&quot; title=&quot;Node 的安装&quot;&gt;&lt;/a&gt;Node 的安装&lt;/h2&gt;&lt;p&gt;Node 的安装方式很简单，只要到 🔗&lt;a href=&quot;https://nodejs.or
      
    
    </summary>
    
      <category term="技术" scheme="https://mingfengst.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Web" scheme="https://mingfengst.github.io/categories/%E6%8A%80%E6%9C%AF/Web/"/>
    
    
      <category term="Node" scheme="https://mingfengst.github.io/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://mingfengst.github.io/posts/2016/hello-world/"/>
    <id>https://mingfengst.github.io/posts/2016/hello-world/</id>
    <published>2016-06-18T05:14:20.000Z</published>
    <updated>2018-05-23T15:47:14.667Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
