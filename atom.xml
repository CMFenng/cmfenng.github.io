<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CMF | Blog</title>
  
  <subtitle>Just Do IT</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://mingfengst.github.io/"/>
  <updated>2017-07-08T14:00:01.000Z</updated>
  <id>https://mingfengst.github.io/</id>
  
  <author>
    <name>CMF</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>VS Code 快速获取七牛图床外链</title>
    <link href="https://mingfengst.github.io/posts/2017/vs-code-get-qiniu-img-url/"/>
    <id>https://mingfengst.github.io/posts/2017/vs-code-get-qiniu-img-url/</id>
    <published>2017-06-19T12:27:17.000Z</published>
    <updated>2017-07-08T14:00:01.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>使用 Markdown 编写文档时，难免会遇到插入本地图片的场景，在本地编辑时，插入图片的本地链接，是可以显示的，但是当文件更改路径后，就会出现找不到图片的现象，因此需要将图片通过图床工具上传到<a href="https://www.qiniu.com/" target="_blank" rel="noopener">七牛空间</a>，获取外链后复制到文档中。这里我们使用 VS Code 安装插件来快速获取七牛图床外链。</p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>第一步：进入 <a href="https://code.visualstudio.com/" target="_blank" rel="noopener">Visual Studio Code 官网</a>进行下载</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://on3f2smuc.bkt.clouddn.com/17-6-18/59696693.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>第二步：选择你的电脑操作系统平台，下载合适的安装包</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://on3f2smuc.bkt.clouddn.com/17-6-18/19617153.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>第一步：双击下载的安装包，进入安装向导界面，点击下一步</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://on3f2smuc.bkt.clouddn.com/17-6-18/37514216.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>第二步：进入许可协议，点击”我接收协议“选项，点击下一步</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://on3f2smuc.bkt.clouddn.com/17-6-18/10611652.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>第三步：选择目标位置，就是你想把软件安装在哪个目录，选择合适的目录后继续点击下一步</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://on3f2smuc.bkt.clouddn.com/17-6-18/59945320.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>第四步：在开始菜单文件夹中创建快捷方式，可以默认选项，点击下一步</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://on3f2smuc.bkt.clouddn.com/17-6-18/60232746.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>第五步：进入选择其他任务界面，建议保留默认选项，同时也可以选择将打开方式添加到鼠标右键菜单中（勾选“其他”中的第一选项），继续点击下一步</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://on3f2smuc.bkt.clouddn.com/17-6-18/44421188.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>第六步：直接点击安装，几秒后，即可安装完成</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://on3f2smuc.bkt.clouddn.com/17-6-18/76981211.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://on3f2smuc.bkt.clouddn.com/17-6-18/44440233.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>第七步：点击完成，即可启动 Visual Studio Code</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://on3f2smuc.bkt.clouddn.com/17-6-18/24757255.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>第八步：VS Code 启动的界面</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://on3f2smuc.bkt.clouddn.com/17-6-18/25690353.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="qiniu-upload-image-插件安装"><a href="#qiniu-upload-image-插件安装" class="headerlink" title="qiniu-upload-image 插件安装"></a>qiniu-upload-image 插件安装</h2><p>第一步：在 VS Code 界面使用快捷方式<code>Ctrl+P</code>并输入以下命令，回车</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ext install qiniu-upload-image</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://on3f2smuc.bkt.clouddn.com/17-6-18/55374758.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>第二步：点击安装</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://on3f2smuc.bkt.clouddn.com/17-6-18/72792983.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>第三步：安装完成后，需要点击重新加载以激活扩展</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://on3f2smuc.bkt.clouddn.com/17-6-18/9943671.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>第四步：打开”文件 - 首选项 - 设置“，可见多了<code>qiniu configuration</code>这项，点击左侧的图标进行编辑</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://on3f2smuc.bkt.clouddn.com/17-6-18/64638715.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>第五步：配置项的介绍</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    // 插件开关</span><br><span class="line">    "qiniu.enable": true,</span><br><span class="line"></span><br><span class="line">    // 一个有效的七牛 AccessKey 签名授权</span><br><span class="line">    "qiniu.access_key": "*****************************************",</span><br><span class="line"></span><br><span class="line">    // 一个有效的七牛 SecretKey 签名授权</span><br><span class="line">    "qiniu.secret_key": "*****************************************",</span><br><span class="line"></span><br><span class="line">    // 七牛图片上传空间</span><br><span class="line">    "qiniu.bucket": "image",</span><br><span class="line"></span><br><span class="line">    // 七牛图片上传路径，参数化命名，暂时支持 $&#123;fileName&#125;、$&#123;mdFileName&#125;、$&#123;date&#125;、$&#123;dateTime&#125;</span><br><span class="line">    // 示例：</span><br><span class="line">    //   $&#123;fileName&#125;-$&#123;date&#125; -&gt; picName-20160725.jpg</span><br><span class="line">    //   $&#123;mdFileName&#125;-$&#123;dateTime&#125; -&gt; markdownName-20170412222810.jpg</span><br><span class="line">    "qiniu.remotePath": "$&#123;fileName&#125;",</span><br><span class="line"></span><br><span class="line">    // 七牛图床域名</span><br><span class="line">    "qiniu.domain": "http://xxxxx.xxxx.com"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第六步：登录<a href="http://jiantuku.com/#/" target="_blank" rel="noopener">极简图床</a>，点击齿轮图标，切换到”自定义七牛空间”项</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://on3f2smuc.bkt.clouddn.com/17-6-18/45102119.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>第七步：将以上相关信息复制到<code>qiniu configuration</code>配置中并保存即可（有的需要重启软件）</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://on3f2smuc.bkt.clouddn.com/17-6-18/99710499.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>第八步：复制要上传的本地图片链接，输入快捷方式<code>Ctrl+Q</code>启动，粘贴并回车，即可将图片插入到光标所在处</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://on3f2smuc.bkt.clouddn.com/17-6-18/29027663.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><blockquote><p>Tips: 只有在编辑 Markdown 时插件才可使用，启动快捷键<code>Ctrl+Q</code>。</p></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/yscoder/vscode-qiniu-upload-image" target="_blank" rel="noopener">一个 VS Code 插件，写 Markdown 时可以快捷上传本地图片获取七牛图床外链</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;使用 Markdown 编写文档时，难免会遇到插入本地图片的场景，在本地编辑时，插入图片的本地链接，是可以显示的，但是当文件更改路径后，就会
      
    
    </summary>
    
      <category term="工具" scheme="https://mingfengst.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="工具" scheme="https://mingfengst.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="VS Code" scheme="https://mingfengst.github.io/tags/VS-Code/"/>
    
      <category term="七牛" scheme="https://mingfengst.github.io/tags/%E4%B8%83%E7%89%9B/"/>
    
  </entry>
  
  <entry>
    <title>Chrome 开发者工具</title>
    <link href="https://mingfengst.github.io/posts/2015/chrome-dev-tools/"/>
    <id>https://mingfengst.github.io/posts/2015/chrome-dev-tools/</id>
    <published>2015-07-07T14:10:08.000Z</published>
    <updated>2017-07-10T15:35:51.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Chrome 浏览器想必是每个前端工程师必备的利器之一，速度快、体积小、支持的特性也比其他浏览器多；除此之外，它还拥有强大的控制台功能，但很多开发者并没有用出控制台的精髓，只是使用<code>console.log();</code>其实控制台的功能远不止那么简单。</p><h2 id="console"><a href="#console" class="headerlink" title="console"></a>console</h2><p>既然<code>console</code>能打印出我们想要的信息，那么就试着打印下它自己。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">console</span>);</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://on3f2smuc.bkt.clouddn.com/17-3-20/5550666-file_1489995843944_14a5f.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>可见，<code>console</code>也是一个对象，而且除了常用的<code>log()</code>方法外，还有很多实用的方法。那么一起来看看它们有多实用。</p><h3 id="assert"><a href="#assert" class="headerlink" title="assert()"></a>assert()</h3><blockquote><p><code>console.assert();</code>用于判断表达式，满足表达式时才输出语句</p></blockquote><p>当你想代码在满足某些条件时才在控制台输出信息，那么大可不必用<code>if</code>或者三元表达式来实现，<code>console.assert();</code>就是这样场景下的好方法，它会先对传入的表达式进行断言，表达式为<code>true</code>时不会输出信息，只有表达式为<code>false</code>时才会在控制台输出<code>error</code>信息。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> isTrue = <span class="literal">false</span>;</span><br><span class="line"><span class="built_in">console</span>.assert(isTrue, <span class="string">"条件不满足！"</span>);</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://on3f2smuc.bkt.clouddn.com/17-3-20/62754807-file_1489996170591_1585b.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="clear"><a href="#clear" class="headerlink" title="clear()"></a>clear()</h3><blockquote><p><code>console.clear();</code>用于清空控制台</p></blockquote><p>当然，也可以用以下方式：</p><ul><li>直接在控制台输入<code>clear()</code></li><li>直接用快捷键<code>Ctrl+L(Win)</code>、<code>Cmd+K(Mac)</code></li></ul><h3 id="count"><a href="#count" class="headerlink" title="count()"></a>count()</h3><blockquote><p><code>console.count();</code>用于记录代码执行的次数</p></blockquote><p>当想要知道某一段代码被执行了多少次，不用自己去写相关的逻辑，内置的<code>console.count();</code>完全可以胜任这项任务。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 函数体</span></span><br><span class="line">    <span class="built_in">console</span>.count(<span class="string">"fun被执行次数"</span>);</span><br><span class="line">&#125;</span><br><span class="line">fun();</span><br><span class="line">fun();</span><br><span class="line">fun();</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://on3f2smuc.bkt.clouddn.com/17-3-20/69658318-file_1489996301508_277d.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="debug-、log-、info-、warn-、error"><a href="#debug-、log-、info-、warn-、error" class="headerlink" title="debug()、log()、info()、warn()、error()"></a>debug()、log()、info()、warn()、error()</h3><blockquote><p><code>console.debug();</code>用于输出调试的信息<br><code>console.log();</code>用于输出一般的信息<br><code>console.info();</code>用于输出提示的信息<br><code>console.warn();</code>用于输出警示的信息<br><code>console.error();</code>用于输出错误的信息</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.debug(<span class="string">"调试的信息"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"一般的信息"</span>);</span><br><span class="line"><span class="built_in">console</span>.info(<span class="string">"提示的信息"</span>);</span><br><span class="line"><span class="built_in">console</span>.warn(<span class="string">"警示的信息"</span>);</span><br><span class="line"><span class="built_in">console</span>.error(<span class="string">"错误的信息"</span>);</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://on3f2smuc.bkt.clouddn.com/17-3-20/12227031-file_1490007124937_7d05.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>大家都会用<code>log()</code>，但很少有人能够很好地利用<code>warn</code>，<code>error</code>等将输出到控制台的信息进行分类整理。他们功能区别不大，意义在于将输出到控制台的信息进行归类，或者说让它们更语义化。</p><p>另外，<code>console.log();</code>可以接收多个参数，参数间用逗号分隔，控制台会根据参数的设置把多个消息打印到同一行。</p><p>如果<code>log()</code>里第一个参数是带有<strong>特殊标识符</strong>的字符串的话，控制台会根据不同的标识符来把后面的参数填充到前面的字符串中去。常见的标识符有：</p><blockquote><p><code>%s</code>表示输出字符串<br><code>%d</code>表示输出数字（也可以用<code>%i</code>）<br><code>%f</code>表示输出浮点数值<br><code>%o</code>表示输出 Dom 元素<br><code>%O</code>表示输出 JavaScript 对象<br><code>%c</code>表示对输出的文字应用特殊的样式</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">var</span> b = [<span class="number">456</span>, <span class="string">"789"</span>, <span class="literal">true</span>];</span><br><span class="line"><span class="keyword">var</span> c = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    name : <span class="string">"张三"</span>;</span><br><span class="line">    age : <span class="number">20</span>;</span><br><span class="line">    sex : <span class="string">"男"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a, b, c);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"今天%s星期%d"</span>, <span class="string">"是"</span>, <span class="number">6</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"%o"</span>, <span class="built_in">document</span>.body);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"%O"</span>, <span class="built_in">document</span>.body);</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://on3f2smuc.bkt.clouddn.com/17-3-20/59251228-file_1490007206707_c07f.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>最特别的还是<code>%c</code>的用法，可以让控制台输出由你定制样式的内容。例如这样：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"%cFrom CMF:"</span>, <span class="string">"color: yellow; background: red; font-size: 20px; border-radius: 5px"</span>, <span class="string">"Hello World!"</span>);</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://on3f2smuc.bkt.clouddn.com/17-3-20/81796162-file_1490007301987_11bde.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>还有这样酷炫的：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"%chello world"</span>,<span class="string">"background-image:-webkit-gradient(linear, left top, right top, color-stop(0, #f22), color-stop(0.15, #f2f), color-stop(0.3, #22f), color-stop(0.45, #2ff), color-stop(0.6, #2f2), color-stop(0.75, #2f2), color-stop(0.9, #ff2), color-stop(1, #f22) ); color:transparent; -webkit-background-clip: text; font-size:5em;"</span>);</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://on3f2smuc.bkt.clouddn.com/17-3-20/48863260-file_1490007350305_13915.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>可以看出<code>%c</code>应用的样式是 CSS 的语法，所以 CSS 支持的样式语句基本上都可以支持。</p><p>添加了样式的输出语句貌似看起来没啥用，但是当多人分模块开发一个大型的项目的时候，控制台输出一大堆信息，肯定没办法一下子找到属于自己模块的信息。要是你给自己的模块输出语句添加了具有特色的样式，那么就能较快地定位，这也是提高效率的一个小技巧。</p><h3 id="dir"><a href="#dir" class="headerlink" title="dir()"></a>dir()</h3><blockquote><p><code>console.dir();</code>用于展开输出一个 DOM 元素的 JavaScript 对象</p></blockquote><p>区别：<code>console.dir();</code>是将 DOM 结点以 JavaScript 对象的形式输出到控制台，而<code>console.log();</code>是直接将 DOM 结点以 DOM 树的结构进行输出，与在元素审查时看到的结构是一致的。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">document</span>.body);</span><br><span class="line"><span class="built_in">console</span>.dir(<span class="built_in">document</span>.body);</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://on3f2smuc.bkt.clouddn.com/17-3-20/97286890-file_1490007404055_666f.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>同样，它们也可以以不同的形式打印函数。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">People</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    name : <span class="string">"张三"</span>;</span><br><span class="line">    age : <span class="number">20</span>;</span><br><span class="line">    sex : <span class="string">"男"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.dir(People);</span><br><span class="line"><span class="built_in">console</span>.log(People);</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://on3f2smuc.bkt.clouddn.com/17-3-20/11300784-file_1490007474306_7eea.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="dirxml"><a href="#dirxml" class="headerlink" title="dirxml()"></a>dirxml()</h3><blockquote><p><code>console.dirxml();</code>用于查看页面中某个节点的 html/xml 代码</p></blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我在div里面呢<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.getElementById(<span class="string">"div"</span>);</span><br><span class="line"><span class="built_in">console</span>.dirxml(div);</span><br><span class="line"><span class="built_in">console</span>.log(div);</span><br></pre></td></tr></table></figure><p>效果跟<code>console.log();</code>是一样的。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://on3f2smuc.bkt.clouddn.com/17-3-20/46368-file_1490007544219_624d.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="group-amp-groupEnd"><a href="#group-amp-groupEnd" class="headerlink" title="group() &amp; groupEnd()"></a>group() &amp; groupEnd()</h3><blockquote><p><code>console.group();</code>和<code>console.groupEnd();</code>配合使用，用于将各自的信息分组到以各自命名空间为名称的组里面。</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.group(<span class="string">"module_1"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"来自 module_1 的普通信息"</span>);</span><br><span class="line"><span class="built_in">console</span>.info(<span class="string">"来自 module_1 的提示信息"</span>);</span><br><span class="line"><span class="built_in">console</span>.groupEnd();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.group(<span class="string">"module_2"</span>);</span><br><span class="line"><span class="built_in">console</span>.warn(<span class="string">"来自 module_2 的警示信息"</span>);</span><br><span class="line"><span class="built_in">console</span>.error(<span class="string">"来自 module_2 的错误信息"</span>);</span><br><span class="line"><span class="built_in">console</span>.groupEnd();</span><br></pre></td></tr></table></figure><p>这样的控制台信息看上去就一目了然，再也不用为了找这是属于哪一个模块输出的而翻源码。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://on3f2smuc.bkt.clouddn.com/17-3-20/92770024-file_1490007608237_247b.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>如果想要输出为折叠模式，可以使用<code>console.groupCollapsed();</code>，用法和<code>console.group();</code>类似。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.groupCollapsed(<span class="string">"module_1"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"来自 module_1 的普通信息"</span>);</span><br><span class="line"><span class="built_in">console</span>.info(<span class="string">"来自 module_1 的提示信息"</span>);</span><br><span class="line"><span class="built_in">console</span>.groupEnd();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.groupCollapsed(<span class="string">"module_2"</span>);</span><br><span class="line"><span class="built_in">console</span>.warn(<span class="string">"来自 module_2 的警示信息"</span>);</span><br><span class="line"><span class="built_in">console</span>.error(<span class="string">"来自 module_2 的错误信息"</span>);</span><br><span class="line"><span class="built_in">console</span>.groupEnd();</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://on3f2smuc.bkt.clouddn.com/17-3-20/56435360-file_1490007663183_162b9.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="memory"><a href="#memory" class="headerlink" title="memory"></a>memory</h3><blockquote><p><code>console.memory</code>用于显示此刻使用的内存信息（注意这是一个属性而不是方法）</p></blockquote><h3 id="profile-amp-profileEnd"><a href="#profile-amp-profileEnd" class="headerlink" title="profile() &amp; profileEnd()"></a>profile() &amp; profileEnd()</h3><blockquote><p><code>console.profile();</code>用于记录代码消耗 CPU 的信息</p></blockquote><p>当想要查看 CPU 使用相关的信息时，可以使用<code>console.profile();</code>和<code>console.profileEnd();</code>配合使用来完成这个需求。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.profile(<span class="string">"for 循环耗时"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10000000</span>; i++) &#123;</span><br><span class="line">    <span class="comment">// 循环体</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.profileEnd(<span class="string">"for 循环耗时"</span>);</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://on3f2smuc.bkt.clouddn.com/17-3-20/69063336-file_1490007729330_ac14.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="table"><a href="#table" class="headerlink" title="table()"></a>table()</h3><blockquote><p><code>console.table();</code>用于以表格的形式输出信息</p></blockquote><p>有的时候后端传回来一大串数据，如果直接<code>console.log();</code>或是通过抓包工具来查看，肯定会让你晕头转向，这个时候<code>console.table();</code>可以发挥作用了，以表格的形式呈现数据，自然一目了然。</p><p>而且点击表头还可以对数据进行排序。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> data = &#123;</span><br><span class="line">    num : <span class="number">30</span>,</span><br><span class="line">    students : [</span><br><span class="line">        &#123;</span><br><span class="line">            name : <span class="string">"张三"</span>,</span><br><span class="line">            age : <span class="number">20</span>,</span><br><span class="line">            sex : <span class="string">"男"</span>,</span><br><span class="line">            hobby : <span class="string">"打篮球"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            name : <span class="string">"李四"</span>,</span><br><span class="line">            age : <span class="number">21</span>,</span><br><span class="line">            hobby : <span class="string">"打游戏"</span>,</span><br><span class="line">            sex : <span class="string">"男"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            name : <span class="string">"王五"</span>,</span><br><span class="line">            sex : <span class="string">"女"</span>,</span><br><span class="line">            age : <span class="number">18</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.table(data.students);</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://on3f2smuc.bkt.clouddn.com/17-3-20/83685386-file_1490008035894_4433.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="time-amp-timeEnd"><a href="#time-amp-timeEnd" class="headerlink" title="time() &amp; timeEnd()"></a>time() &amp; timeEnd()</h3><blockquote><p><code>console.time();</code>和<code>console.timeEnd();</code>配合使用，用于记录代码运行所消耗的时间</p></blockquote><p>输出一些调试信息只是控制台最常用而且最基本的功能。当做一些性能测试时，同样可以在这里很方便地进行。比如需要考量一段代码执行的耗时情况时。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.time(<span class="string">"for 循环耗时"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10000000</span>; i++) &#123;</span><br><span class="line">    <span class="comment">// 循环体</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">"for 循环耗时"</span>);</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://on3f2smuc.bkt.clouddn.com/17-3-20/1146017-file_1490008081543_e14e.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="timeStamp"><a href="#timeStamp" class="headerlink" title="timeStamp()"></a>timeStamp()</h3><blockquote><p><code>console.timeStamp();</code>用于标记运行时的 timeline 信息</p></blockquote><h2 id="一些其他指令"><a href="#一些其他指令" class="headerlink" title="一些其他指令"></a>一些其他指令</h2><h3 id=""><a href="#" class="headerlink" title="$_"></a>$_</h3><blockquote><p>表示上一次在控制台键入的命令，也可以用快捷键<code>↑</code>来达到同样的效果</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">2</span> + <span class="number">2</span><span class="comment">// 回车</span></span><br><span class="line">$_+<span class="number">1</span><span class="comment">// 再回车得5</span></span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://on3f2smuc.bkt.clouddn.com/17-3-20/942220-file_1490008112159_133c4.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="0-4"><a href="#0-4" class="headerlink" title="$0 ~ $4"></a><code>$0</code> ~ <code>$4</code></h3><blockquote><p>可以在控制台输出在<code>Elements</code>面板选中的页面元素<br><code>$0~$4</code>代表最近 5 个你选择过的 DOM 节点</p></blockquote><p>什么意思呢？在页面右击选择审查元素，然后在弹出来的 DOM 节点树上面随便点选，这些被点过的节点会被记录下来，而<code>$0</code>会返回最近一次选的 DOM 节点，以此类推，<code>$1</code>返回的是上上次选的 DOM 节点，最多保存 5 个，如果不够 5 个，则返回<code>undefined</code>。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://on3f2smuc.bkt.clouddn.com/17-3-20/19987843-file_1490008164546_f20d.gif" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>另外值得一赞的是，Chrome 控制台中原生支持类 jQuery 的选择器，也就是说你可以用<code>$</code>加上熟悉的 css 选择器来选择 DOM 节点。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我在div1里面呢<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我在div2里面呢<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">"div"</span>);</span><br><span class="line">$$(<span class="string">"div"</span>);</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://on3f2smuc.bkt.clouddn.com/17-3-20/17913593-file_1490008308258_85cd.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><blockquote><p><code>$(selector)</code>返回的是满足选择条件的首个 DOM 元素，其实就是<code>document.querySelector()</code>的封装。<br><code>$$(selector)</code>返回的是满足选择条件的所有元素的一个集合(数组)，是对<code>document.querySelectorAll()</code>的封装。</p></blockquote><h3 id="x-path"><a href="#x-path" class="headerlink" title="$x(path)"></a>$x(path)</h3><blockquote><p><code>$x</code>可以用 xPath 的语法来获取页面上的元素，将所匹配的节点放在一个数组里返回</p></blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我在div1里面呢<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span>&gt;</span>我在div2里面呢<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$x(<span class="string">"//div"</span>);<span class="comment">//匹配所有的div节点</span></span><br><span class="line">$x(<span class="string">"//div[p]"</span>);<span class="comment">//匹配所有子节点包含p的div节点</span></span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://on3f2smuc.bkt.clouddn.com/17-3-20/9873472-file_1490008369177_4012.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="copy"><a href="#copy" class="headerlink" title="copy()"></a>copy()</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">copy(<span class="built_in">document</span>.body);</span><br></pre></td></tr></table></figure><p>然后就可以<code>Ctrl+V</code>了。</p><p><strong>注意：</strong>它不依附于任何全局变量比如 window ，所以其实在 JS 代码里是访问不了这个 copy 方法的。</p><h3 id="keys-amp-values"><a href="#keys-amp-values" class="headerlink" title="keys() &amp; values()"></a>keys() &amp; values()</h3><p>这是一对基友。</p><blockquote><p><code>keys();</code>返回传入对象所有属性名组成的数组<br><code>values();</code>返回传入对象所有属性值组成的数组</p></blockquote><p>具体请看下面的例子：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> people = &#123;</span><br><span class="line">    name : <span class="string">"张三"</span>,</span><br><span class="line">    sex : <span class="string">"男"</span>,</span><br><span class="line">    age : <span class="number">20</span>,</span><br><span class="line">    hobby : <span class="string">"打篮球"</span></span><br><span class="line">&#125;;</span><br><span class="line">keys(people);</span><br><span class="line">values(people);</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://on3f2smuc.bkt.clouddn.com/17-3-20/91208647-file_1490008425050_9a0b.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="monitor-amp-unmonitor"><a href="#monitor-amp-unmonitor" class="headerlink" title="monitor() &amp; unmonitor()"></a>monitor() &amp; unmonitor()</h3><blockquote><p><code>monitor(function);</code>接收一个函数名作为参数，比如 function sayHello，每次 sayHello 被执行了，都会在控制台输出一条信息，里面包含了函数的名称 sayHello 及执行时所传入的参数。而<code>unmonitor(function);</code>则是用来停止这一监听。</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHello</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">"Hello,"</span> + name);</span><br><span class="line">&#125;</span><br><span class="line">monitor(sayHello);</span><br><span class="line">sayHello(<span class="string">"CMF"</span>);</span><br><span class="line">sayHello(<span class="string">"HTML5"</span>);</span><br><span class="line">unmonitor(sayHello);</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://on3f2smuc.bkt.clouddn.com/17-3-20/87966517-file_1490008466254_e028.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Chrome 浏览器想必是每个前端工程师必备的利器之一，速度快、体积小、支持的特性也比其他浏览器多；除此之外，它还拥有强大的控制台功能，但很
      
    
    </summary>
    
      <category term="工具" scheme="https://mingfengst.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="工具" scheme="https://mingfengst.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="Chrome" scheme="https://mingfengst.github.io/tags/Chrome/"/>
    
  </entry>
  
  <entry>
    <title>网页命名规则</title>
    <link href="https://mingfengst.github.io/posts/2014/web-naming-rules/"/>
    <id>https://mingfengst.github.io/posts/2014/web-naming-rules/</id>
    <published>2014-06-30T16:24:58.000Z</published>
    <updated>2017-07-08T14:01:43.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>规范的命名在程序开发中有明显的优势，它即能让自己日后维护简单，也能让团队友好的合作，在网页开发中，特别是团队合作，命名是非常重要的。</p><h2 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h2><ul><li>内容：content / container</li><li>导航：nav</li><li>侧栏：sidebar</li><li>栏目：column</li><li>标志：logo</li><li>页面主体：main</li><li>广告：banner</li><li>热点：hot</li><li>新闻：news</li><li>下载：download</li><li>子导航：subnav</li><li>菜单：menu</li><li>搜索：search</li><li>页脚：footer</li><li>滚动：scroll</li><li>版权：copyright</li><li>友情链接：friendlink</li><li>子菜单：submenu</li><li>标签页：tab</li><li>文章列表：list</li><li>注册：regsiter</li><li>提示信息：msg</li><li>小技巧：tips</li><li>加入：joinus</li><li>栏目标题：title</li><li>指南：guide</li><li>服务：service</li><li>状态：status</li><li>投票：vote</li><li>合作伙伴：partner</li><li>登录条：loginbar</li><li>页面外围控制整体布局宽度：wrapper</li><li>左 / 右 / 中：left / right / center</li></ul><h2 id="注释的写法"><a href="#注释的写法" class="headerlink" title="注释的写法"></a>注释的写法</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Footer */</span></span><br><span class="line">内容区</span><br><span class="line"><span class="comment">/* End Footer */</span></span><br></pre></td></tr></table></figure><h2 id="id-的命名"><a href="#id-的命名" class="headerlink" title="id 的命名"></a>id 的命名</h2><h3 id="页面结构"><a href="#页面结构" class="headerlink" title="页面结构"></a>页面结构</h3><ul><li>容器：container</li><li>页头：header</li><li>内容：content / container</li><li>页面主体：main</li><li>页尾：footer</li><li>导航：nav</li><li>侧栏：sidebar</li><li>栏目：column</li><li>左 / 右 / 中：left / right / center</li><li>页面外围控制整体布局宽度：wrapper</li></ul><h3 id="导航"><a href="#导航" class="headerlink" title="导航"></a>导航</h3><ul><li>导航：nav</li><li>主导航：mainbav</li><li>子导航：subnav</li><li>顶导航：topnav</li><li>边导航：sidebar</li><li>左导航：leftsidebar</li><li>右导航：rightsidebar</li><li>菜单：menu</li><li>子菜单：submenu</li><li>标题：title</li><li>摘要:：summary</li></ul><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><ul><li>标志：logo</li><li>广告：banner</li><li>登陆：login</li><li>登录条：loginbar</li><li>注册：regsiter</li><li>搜索：search</li><li>购物车：shop</li><li>标题：title</li><li>加入：joinus</li><li>状态：status</li><li>按钮：btn</li><li>滚动：scroll</li><li>标签页：tab</li><li>文章列表：list</li><li>提示信息：msg</li><li>当前的：current</li><li>小技巧：tips</li><li>图标: icon</li><li>注释：note</li><li>服务：service</li><li>热点：hot</li><li>新闻：news</li><li>下载：download</li><li>投票：vote</li><li>合作伙伴：partner</li><li>友情链接：link</li><li>版权：copyright</li></ul><h2 id="class-的命名"><a href="#class-的命名" class="headerlink" title="class 的命名"></a>class 的命名</h2><h3 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h3><blockquote><p>使用颜色的名称或者 16 进制代码</p></blockquote><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.red</span> &#123; <span class="attribute">color</span>: red; &#125;</span><br><span class="line"><span class="selector-class">.f60</span> &#123; <span class="attribute">color</span>: <span class="number">#f60</span>; &#125;</span><br><span class="line"><span class="selector-class">.ff8600</span> &#123; <span class="attribute">color</span>: <span class="number">#ff8600</span>; &#125;</span><br></pre></td></tr></table></figure><h3 id="字体大小"><a href="#字体大小" class="headerlink" title="字体大小"></a>字体大小</h3><blockquote><p>直接使用”font+字体大小”作为名称</p></blockquote><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.font12px</span> &#123; <span class="attribute">font-size</span>: <span class="number">12px</span>; &#125;</span><br><span class="line"><span class="selector-class">.font9pt</span> &#123; <span class="attribute">font-size</span>: <span class="number">9pt</span>; &#125;</span><br></pre></td></tr></table></figure><h3 id="对齐样式"><a href="#对齐样式" class="headerlink" title="对齐样式"></a>对齐样式</h3><blockquote><p>使用对齐目标的英文名称</p></blockquote><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.left</span> &#123; <span class="attribute">float</span>: left; &#125;</span><br><span class="line"><span class="selector-class">.bottom</span> &#123; <span class="attribute">float</span>: bottom; &#125;</span><br></pre></td></tr></table></figure><h3 id="标题栏样式"><a href="#标题栏样式" class="headerlink" title="标题栏样式"></a>标题栏样式</h3><blockquote><p>使用”类别+功能”的方式命名</p></blockquote><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.barnews</span> &#123; &#125;</span><br><span class="line"><span class="selector-class">.barproduct</span> &#123; &#125;</span><br></pre></td></tr></table></figure><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li>一律小写</li><li>尽量用英文</li><li>不加中杆和下划线</li><li>尽量不缩写，除非一看就明白的单词</li></ol><ul><li>主要的：master.css</li><li>模块：module.css</li><li>基本共用：base.css</li><li>主题：themes.css</li><li>专栏：columns.css</li><li>打印：print.css</li><li>文字：font.css</li><li>表单：forms.css</li><li>补丁：mend.css</li><li>布局 / 版面：layout.css</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;规范的命名在程序开发中有明显的优势，它即能让自己日后维护简单，也能让团队友好的合作，在网页开发中，特别是团队合作，命名是非常重要的。&lt;/p&gt;
      
    
    </summary>
    
      <category term="前端" scheme="https://mingfengst.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="命名规范" scheme="https://mingfengst.github.io/tags/%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://mingfengst.github.io/posts/2014/hello-world/"/>
    <id>https://mingfengst.github.io/posts/2014/hello-world/</id>
    <published>2014-06-18T05:14:20.000Z</published>
    <updated>2017-06-18T12:54:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
